apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId "com.stedi.randomimagegenerator.app"
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 2
        versionName "1.1"
        testInstrumentationRunner "com.stedi.randomimagegenerator.app.MyAndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        manifestPlaceholders = [crashlyticsKey: getLocalProperty("crashlyticsKey")]
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
    }

    signingConfigs {
        release {
            def storeFileProp = getLocalProperty('storeFile')
            if (!storeFileProp.isEmpty()) {
                storeFile = file(storeFileProp)
                keyAlias = getLocalProperty('keyAlias')
                storePassword = getLocalProperty('storePassword')
                keyPassword = getLocalProperty('keyPassword')
            }
        }
    }

    buildTypes {
        debug {
            ext.enableCrashlytics = false
            versionNameSuffix "-DBG"
            applicationIdSuffix ".dbg"
            signingConfig signingConfigs.debug
        }
        slowdebug {
            ext.enableCrashlytics = false
            versionNameSuffix "-SDBG"
            applicationIdSuffix ".sdbg"
            signingConfig signingConfigs.debug
        }
        release {
            ext.enableCrashlytics = true
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

dependencies {
    implementation 'com.stedi.randomimagegenerator:rig:1.0.0'

    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jre7:1.2.31'

    implementation 'com.android.support:appcompat-v7:27.1.0'
    implementation 'com.android.support:cardview-v7:27.1.0'
    implementation 'com.android.support:recyclerview-v7:27.1.0'
    implementation 'com.android.support:design:27.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'

    implementation 'com.stepstone.stepper:material-stepper:4.2.0'

    implementation 'com.google.dagger:dagger:2.11'
    kapt 'com.google.dagger:dagger-compiler:2.11'

    implementation 'io.reactivex:rxjava:1.3.0'
    implementation 'io.reactivex:rxandroid:1.2.1'

    implementation 'com.squareup:otto:1.3.8'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    slowdebugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'

    implementation('com.crashlytics.sdk.android:crashlytics:2.7.1@aar') {
        transitive = true
    }

    implementation 'com.jakewharton:butterknife:8.8.1'
    kapt 'com.jakewharton:butterknife-compiler:8.8.1'

    implementation 'com.j256.ormlite:ormlite-android:5.0'

    testImplementation 'junit:junit:4.12'
    testImplementation "org.mockito:mockito-core:2.16.0"
    androidTestImplementation 'org.mockito:mockito-android:2.16.0'
    androidTestImplementation 'com.github.tmurakami:dexopener:0.12.1'
    androidTestImplementation('com.android.support.test:runner:1.0.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation('com.android.support.test:rules:1.0.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation 'com.android.support.test.espresso:espresso-contrib:3.0.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
    androidTestUtil 'com.android.support.test:orchestrator:1.0.1'
}

def getLocalProperty(String propertyName) {
    def propsFile = rootProject.file('local.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        def retProp = props[propertyName]
        return retProp != null ? retProp : ""
    }
    return ""
}