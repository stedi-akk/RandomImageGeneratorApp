apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'io.fabric'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        applicationId "com.stedi.randomimagegenerator.app"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "0.01"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        manifestPlaceholders = [crashlyticsKey: getLocalProperty("crashlyticsKey")]
    }

    signingConfigs {
        release {
            def storeFileProp = getLocalProperty('storeFile')
            if (!storeFileProp.isEmpty()) {
                storeFile = file(storeFileProp)
                keyAlias = getLocalProperty('keyAlias')
                storePassword = getLocalProperty('storePassword')
                keyPassword = getLocalProperty('keyPassword')
            }
        }
    }

    buildTypes {
        debug {
            versionNameSuffix "-DBG"
            applicationIdSuffix ".dbg"
            signingConfig signingConfigs.debug
        }
        slowdebug {
            versionNameSuffix "-SDBG"
            applicationIdSuffix ".sdbg"
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

dependencies {
    compile 'com.stedi.randomimagegenerator:rig:1.0.0'

    compile 'com.android.support:appcompat-v7:25.4.0'
    compile 'com.android.support:cardview-v7:25.4.0'
    compile 'com.android.support:recyclerview-v7:25.4.0'
    compile 'com.android.support:design:25.4.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'

    compile 'com.stepstone.stepper:material-stepper:4.2.0'

    compile 'com.google.dagger:dagger:2.10'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.10'

    compile 'io.reactivex:rxjava:1.2.9'
    compile 'io.reactivex:rxandroid:1.2.1'

    compile 'com.squareup:otto:1.3.8'
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'

    compile('com.crashlytics.sdk.android:crashlytics:2.7.1@aar') {
        transitive = true;
    }

    compile 'com.jakewharton:butterknife:8.5.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'

    compile 'com.j256.ormlite:ormlite-android:5.0'

    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:1.10.19"
    androidTestCompile('com.android.support.test:runner:0.5', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestCompile('com.android.support.test:rules:0.5', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestCompile 'org.mockito:mockito-core:1.9.5'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile 'com.android.support.test.espresso:espresso-contrib:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
}

def getLocalProperty(String propertyName) {
    def propsFile = rootProject.file('local.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        def retProp = props[propertyName]
        if (retProp != null) {
            return retProp
        } else {
            return ""
        }
    } else {
        return ""
    }
}